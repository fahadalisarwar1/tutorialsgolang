Go is a concurrent language not a parallel one
-------------------------------------------------------

Large programs are often made up of many smaller sub-programs. For example a web server handles requests made from web
browsers and
serves up HTML web pages in response. Each request is handled like a small program.

It would be ideal for programs like these to be able to run their smaller components at the same time (in the case of
the web server to handle multiple requests). Making progress on more than one task simultaneously is known
as concurrency. Go has rich support for concurrency using goroutines and channels.

// go routine
A goroutine is a function that is capable of running concurrently with other functions.
To create a goroutine we use the keyword go followed by a function invocation:

// show diagram


go routines can be though of as light weight thread, a go routine is very low on resources so it does not burden the
processor as much as creating a saperate thread does. Hence its common for Go applications to have thousands of
Goroutines running concurrently.

//
Advantages of Goroutines over threads
-------------------------------------
1: Goroutines are extremely cheap when compared to threads. They are only a few kb in stack size and the stack can
grow and shrink according to needs of the application whereas in the case of threads the stack size has to be
specified and is fixed.

2: The Goroutines are multiplexed to fewer number of OS threads. There might be only one thread in a program with
thousands of Goroutines. If any Goroutine in that thread blocks say waiting for user input, then another OS thread is
created and the remaining Goroutines are moved to the new OS thread. All these are taken care by the runtime and we as
 programmers are abstracted from these intricate details and are given a clean API to work with concurrency.

 3: Goroutines communicate using channels. Channels by design prevent race conditions from happening when accessing
 shared memory using Goroutines. Channels can be thought of as a pipe using which Goroutines communicate. We will
 discuss channels in detail in the next tutorial


 ----
 start coding here
